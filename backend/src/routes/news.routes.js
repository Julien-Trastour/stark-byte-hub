import express from 'express';
import {
  createNewsController,
  getAllNewsController,
  getNewsByIdController,
  updateNewsController,
  deleteNewsController,
} from '../controllers/news.controller.js';
import { requireSession } from '../middlewares/session.middleware.js';
import { hasPermission } from '../middlewares/hasPermission.middleware.js';

const router = express.Router();

/**
 * @swagger
 * tags:
 *   name: News
 *   description: Gestion des actualit√©s
 */

// üîí Toutes les routes n√©cessitent une session utilisateur
router.use(requireSession);

/**
 * @swagger
 * /news:
 *   get:
 *     summary: R√©cup√®re toutes les actualit√©s
 *     tags: [News]
 *     security:
 *       - cookieAuth: []
 *     responses:
 *       200:
 *         description: Liste des actualit√©s
 */
router.get('/', getAllNewsController);

/**
 * @swagger
 * /news/{id}:
 *   get:
 *     summary: R√©cup√®re une actualit√© par son ID
 *     tags: [News]
 *     security:
 *       - cookieAuth: []
 *     parameters:
 *       - name: id
 *         in: path
 *         required: true
 *         description: ID de l‚Äôactualit√©
 *         schema:
 *           type: string
 *     responses:
 *       200:
 *         description: Actualit√© trouv√©e
 *       404:
 *         description: Actualit√© non trouv√©e
 */
router.get('/:id', getNewsByIdController);

/**
 * @swagger
 * /news:
 *   post:
 *     summary: Cr√©e une nouvelle actualit√© (requiert "create_news")
 *     tags: [News]
 *     security:
 *       - cookieAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required: [title, description]
 *             properties:
 *               title:
 *                 type: string
 *               description:
 *                 type: string
 *               tags:
 *                 type: array
 *                 items:
 *                   type: string
 *               date:
 *                 type: string
 *                 format: date
 *     responses:
 *       201:
 *         description: Actualit√© cr√©√©e
 *       403:
 *         description: Permission refus√©e
 */
router.post('/', hasPermission('create_news'), createNewsController);

/**
 * @swagger
 * /news/{id}:
 *   patch:
 *     summary: Met √† jour une actualit√© par son ID (requiert "edit_news")
 *     tags: [News]
 *     security:
 *       - cookieAuth: []
 *     parameters:
 *       - name: id
 *         in: path
 *         required: true
 *         schema:
 *           type: string
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               title:
 *                 type: string
 *               description:
 *                 type: string
 *               tags:
 *                 type: array
 *                 items:
 *                   type: string
 *               date:
 *                 type: string
 *                 format: date
 *     responses:
 *       200:
 *         description: Actualit√© mise √† jour
 *       404:
 *         description: Actualit√© non trouv√©e
 *       403:
 *         description: Permission refus√©e
 */
router.patch('/:id', hasPermission('edit_news'), updateNewsController);

/**
 * @swagger
 * /news/{id}:
 *   delete:
 *     summary: Supprime une actualit√© par son ID (requiert "delete_news")
 *     tags: [News]
 *     security:
 *       - cookieAuth: []
 *     parameters:
 *       - name: id
 *         in: path
 *         required: true
 *         schema:
 *           type: string
 *     responses:
 *       204:
 *         description: Actualit√© supprim√©e
 *       404:
 *         description: Actualit√© non trouv√©e
 *       403:
 *         description: Permission refus√©e
 */
router.delete('/:id', hasPermission('delete_news'), deleteNewsController);

export default router;
