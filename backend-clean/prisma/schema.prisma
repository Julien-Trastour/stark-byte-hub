generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String  @id @default(uuid())
  email     String  @unique
  password  String
  firstName String
  lastName  String
  address   String?
  address2  String?
  zipCode   String?
  city      String?
  country   String?

  roleId String
  role   Role   @relation(fields: [roleId], references: [id])

  robots              Robot[]
  passwordResetTokens PasswordResetToken[]
  userModules         UserModule[]
  loginLogs           LoginLog[]
  auditLogs           AuditLog[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Role {
  id          String       @id @default(uuid())
  name        String       @unique
  users       User[]
  permissions Permission[] @relation("RolePermissions")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Permission {
  id        String   @id @default(uuid())
  name      String   @unique
  roles     Role[]   @relation("RolePermissions")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model RevokedToken {
  id        String   @id @default(uuid())
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Robot {
  id           String  @id @default(uuid())
  name         String?
  serialNumber String  @unique
  linkKey      String
  model        String
  firmware     String?
  color        String
  controllable Boolean @default(true)
  imageUrl     String?

  userId String?
  user   User?   @relation(fields: [userId], references: [id])

  commands     Command[]
  sensors      SensorData[]
  robotLogs    RobotLog[]
  patrolRoutes PatrolRoute[]
  mappedAreas  MappedArea[]

  commissionedAt DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Command {
  id        String   @id @default(uuid())
  type      String
  payload   Json
  createdAt DateTime @default(now())

  robotId String
  robot   Robot  @relation(fields: [robotId], references: [id])
}

model SensorData {
  id        String   @id @default(uuid())
  type      String
  value     Float
  unit      String
  timestamp DateTime @default(now())

  robotId String
  robot   Robot  @relation(fields: [robotId], references: [id])
}

model RobotLog {
  id        String   @id @default(cuid())
  robotId   String
  event     String
  details   Json?
  createdAt DateTime @default(now())

  robot     Robot    @relation(fields: [robotId], references: [id])
}

model Log {
  id        String   @id @default(cuid())
  level     String
  message   String
  context   Json?
  createdAt DateTime @default(now())
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  action    String
  metadata  Json?
  createdAt DateTime @default(now())
}

model News {
  id          String   @id @default(uuid())
  title       String
  description String
  tags        String[]
  date        DateTime @default(now())
  images      Image[]

  coverImageId String? @unique
  coverImage   Image?  @relation("CoverImage", fields: [coverImageId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Image {
  id     String @id @default(uuid())
  url    String
  newsId String
  news   News   @relation(fields: [newsId], references: [id], onDelete: Cascade)

  coverOf News? @relation("CoverImage")
}

model Module {
  id                String   @id @default(uuid())
  moduleName        String   @unique
  moduleDescription String
  moduleVersion     String
  isPublic          Boolean  @default(false)
  category          String?
  icon              String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  userModules UserModule[]
}

model UserModule {
  id       String  @id @default(uuid())
  userId   String
  moduleId String
  enabled  Boolean @default(true)

  user   User   @relation(fields: [userId], references: [id])
  module Module @relation(fields: [moduleId], references: [id])

  @@unique([userId, moduleId])
}

model LoginLog {
  id        String   @id @default(cuid())
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  email     String
  success   Boolean
  ip        String
  userAgent String?
  timestamp DateTime @default(now())
}

model PatrolRoute {
  id          String  @id @default(uuid())
  name        String
  description String?
  schedule    String
  robotId     String
  robot       Robot   @relation(fields: [robotId], references: [id])

  mapId String?
  map   MappedArea? @relation(fields: [mapId], references: [id])

  points    PatrolPoint[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model PatrolPoint {
  id      String      @id @default(uuid())
  routeId String
  route   PatrolRoute @relation(fields: [routeId], references: [id])

  order       Int
  label       String
  latitude    Float?
  longitude   Float?
  room        String?
  durationSec Int

  createdAt DateTime @default(now())
}

model MappedArea {
  id         String  @id @default(uuid())
  name       String
  type       String
  imageUrl   String?
  mapDataUrl String?
  robotId    String
  robot      Robot   @relation(fields: [robotId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  patrolRoutes PatrolRoute[]
}
