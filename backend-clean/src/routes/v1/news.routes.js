import express from 'express';
import {
  createNewsController,
  getAllNewsController,
  getNewsByIdController,
  updateNewsController,
  deleteNewsController,
} from '../../controllers/v1/news.controller.js';
import { requireSession } from '../../middlewares/session.middleware.js';
import { hasPermission } from '../../middlewares/hasPermission.middleware.js';

const router = express.Router();

/**
 * @swagger
 * tags:
 *   name: News
 *   description: Gestion des actualit√©s publi√©es dans le hub
 */

// üîê Toutes les routes n√©cessitent une session active
router.use(requireSession);

/**
 * @swagger
 * /news:
 *   get:
 *     summary: Liste toutes les actualit√©s
 *     tags: [News]
 *     security:
 *       - cookieAuth: []
 *     responses:
 *       200:
 *         description: Liste des actualit√©s
 *       403:
 *         description: Permission refus√©e
 */
router.get('/', hasPermission('view_news'), getAllNewsController);

/**
 * @swagger
 * /news/{id}:
 *   get:
 *     summary: D√©tail d‚Äôune actualit√©
 *     tags: [News]
 *     security:
 *       - cookieAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         description: ID de l‚Äôactualit√©
 *         schema:
 *           type: string
 *     responses:
 *       200:
 *         description: Actualit√© trouv√©e
 *       403:
 *         description: Permission refus√©e
 *       404:
 *         description: Actualit√© non trouv√©e
 */
router.get('/:id', hasPermission('view_news'), getNewsByIdController);

/**
 * @swagger
 * /news:
 *   post:
 *     summary: Cr√©e une nouvelle actualit√©
 *     tags: [News]
 *     security:
 *       - cookieAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required: [title, description]
 *             properties:
 *               title:
 *                 type: string
 *                 example: Nouvelle mise √† jour disponible
 *               description:
 *                 type: string
 *                 example: Une nouvelle version du firmware est disponible...
 *               tags:
 *                 type: array
 *                 items:
 *                   type: string
 *                 example: ["mise √† jour", "firmware"]
 *               date:
 *                 type: string
 *                 format: date
 *                 example: "2025-04-04"
 *               images:
 *                 type: array
 *                 items:
 *                   type: string
 *                 example: ["/uploads/news/image1.png"]
 *               coverImageId:
 *                 type: string
 *                 nullable: true
 *     responses:
 *       201:
 *         description: Actualit√© cr√©√©e
 *       400:
 *         description: Donn√©es invalides
 *       403:
 *         description: Permission refus√©e
 */
router.post('/', hasPermission('create_news'), createNewsController);

/**
 * @swagger
 * /news/{id}:
 *   patch:
 *     summary: Met √† jour une actualit√© existante
 *     tags: [News]
 *     security:
 *       - cookieAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         description: ID de l‚Äôactualit√©
 *         schema:
 *           type: string
 *     requestBody:
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               title:
 *                 type: string
 *               description:
 *                 type: string
 *               tags:
 *                 type: array
 *                 items:
 *                   type: string
 *               date:
 *                 type: string
 *                 format: date
 *               images:
 *                 type: array
 *                 items:
 *                   type: string
 *               coverImageId:
 *                 type: string
 *                 nullable: true
 *     responses:
 *       200:
 *         description: Actualit√© mise √† jour
 *       404:
 *         description: Actualit√© non trouv√©e
 *       403:
 *         description: Permission refus√©e
 */
router.patch('/:id', hasPermission('edit_news'), updateNewsController);

/**
 * @swagger
 * /news/{id}:
 *   delete:
 *     summary: Supprime une actualit√©
 *     tags: [News]
 *     security:
 *       - cookieAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         description: ID de l‚Äôactualit√©
 *         schema:
 *           type: string
 *     responses:
 *       204:
 *         description: Actualit√© supprim√©e
 *       404:
 *         description: Actualit√© non trouv√©e
 *       403:
 *         description: Permission refus√©e
 */
router.delete('/:id', hasPermission('delete_news'), deleteNewsController);

export default router;
